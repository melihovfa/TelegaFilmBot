import os
import logging
import asyncio  # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kinopoisk API
KINOPOISK_API_KEY = os.getenv("KINOPOISK_API_KEY")
API_URL = "https://api.kinopoisk.dev/v1.4/movie"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
if not KINOPOISK_API_KEY:
    logger.error("KINOPOISK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

# –ñ–∞–Ω—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –≤ API)
GENRES = {
    "–∫–æ–º–µ–¥–∏—è": "–∫–æ–º–µ–¥–∏—è",
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "—É–∂–∞—Å—ã": "—É–∂–∞—Å—ã",
    "–±–æ–µ–≤–∏–∫": "–±–æ–µ–≤–∏–∫",
    "–¥—Ä–∞–º–∞": "–¥—Ä–∞–º–∞"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∂–∞–Ω—Ä–∞–º–∏
genres_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=genre) for genre in GENRES.keys()]],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞"
)

class FilmStates(StatesGroup):
    choosing_genre = State()

async def fetch_kinopoisk_movies(genre: str):
    """–ó–∞–ø—Ä–æ—Å –∫ Kinopoisk API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    params = {
        "genres.name": GENRES[genre],
        "limit": 5,
        "sortField": "rating.kp",
        "sortType": "-1"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return [
                        {
                            "title": movie.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                            "year": str(movie.get("year", "N/A")),
                            "rating": str(movie.get("rating", {}).get("kp", "0.0")),
                            "poster": movie.get("poster", {}).get("url"),
                            "description": movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        }
                        for movie in data.get("docs", [])
                    ]
                logger.error(f"–û—à–∏–±–∫–∞ API: {resp.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None

@dp.message(F.text == "/start")
async def start_cmd(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üé¨ <b>–ö–∏–Ω–æ–±–æ—Ç —Å –±–∞–∑–æ–π Kinopoisk</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        reply_markup=genres_kb,
        parse_mode="HTML"
    )
    await state.set_state(FilmStates.choosing_genre)

@dp.message(FilmStates.choosing_genre)
async def genre_chosen(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞"""
    try:
        user_genre = message.text.lower()
        
        if user_genre not in GENRES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!")
            return
        
        await message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{message.text}'...")
        
        movies = await fetch_kinopoisk_movies(user_genre)
        
        if not movies:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        for movie in movies:
            caption = (
                f"üé• <b>{movie['title']}</b> ({movie['year']})\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
                f"üìù {movie['description']}"
            )
            
            if movie.get('poster'):
                try:
                    await message.answer_photo(
                        photo=movie['poster'],
                        caption=caption,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
                    await message.answer(caption, parse_mode="HTML")
            else:
                await message.answer(caption, parse_mode="HTML")
        
        await message.answer("üéâ –ì–æ—Ç–æ–≤–æ! –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–Ω—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        await state.clear()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
